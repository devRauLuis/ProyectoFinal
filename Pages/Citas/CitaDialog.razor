@using ServiceStack
@inject DialogService DialogService

<EditForm Model="_cita" OnValidSubmit=@OnSubmit>
    <DataAnnotationsValidator/>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="ID"/>
        </div>
        <div class="col">
            <RadzenNumeric disabled ShowUpDown="false" @bind-Value="@_cita.Id" Name="CitaId"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Motivo"/>
        </div>
        <div class="col">
            <RadzenTextBox @bind-Value="@_cita.Motivo" Name="Motivo"/>
            <ValidationMessage For="@(() => _cita.Motivo)"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Inicio"/>
        </div>
        <div class="col-6">
            <RadzenDatePicker @bind-Value="@_cita.Inicio" Name="Inicio" ShowTime="true" HourFormat="12" MinutesStep="30" DateFormat="dd/MM/yyyy, hh:mm tt"/>
            <ValidationMessage For="@(() => _cita.Inicio)"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Fin"/>
        </div>
        <div class="col">
            <RadzenDatePicker Name="Fin" @bind-Value="@_cita.Fin" ShowTime="true" HourFormat="12" MinutesStep="30" DateFormat="dd/MM/yyyy, hh:mm tt"/>
            <ValidationMessage For="@(() => _cita.Fin)"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Paciente"/>
        </div>
        <div class="col">
            <RadzenDropDown AllowFiltering AllowClear TValue="Paciente" @bind-Value="_cita.Paciente" LoadData="@LoadData"
                            Data="@PacientesList" Placeholder="Seleccione un paciente...">
                <Template Context="dropdownContext">
                    @((dropdownContext as Paciente)?.Nombre + " " + (dropdownContext as Paciente)?.Apellido)
                </Template>
            </RadzenDropDown>
            <ValidationMessage For="@(() => _cita.Paciente)"/>
        </div>
    </div>
    <div style="margin-bottom: 16px">
        <div class="row">
            <div class="col-md-3">
                <RadzenLabel Text="Sintomas"/>
            </div>
            <div class="col">
                <RadzenDropDown AllowFiltering TValue="Sintoma" TextProperty="Descripcion"
                                Data="@SintomasList" Placeholder="Seleccione sintomas..." Change="@OnSintomasChange"/>
                <ValidationMessage For="@(() => _cita.Sintomas)"/>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-3"/>
            <div class="col">
                @foreach (var s in _cita?.Sintomas)
                {
                    <div class="badge bg-dark me-2 mb-2 px-2">
                        @s?.Descripcion <RadzenButton Icon="clear" Click="@(() => OnSintomaDelete(s))" class="fs-6 bg-dark"/>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Guardar" ButtonStyle="ButtonStyle.Info"/>
            @if (_cita.Id > 0)
            {
                <RadzenButton Text="Eliminar" Click="Delete" ButtonStyle="ButtonStyle.Danger"/>
            }
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public DateTime? Start { get; set; } = new DateTime();

    [Parameter]
    public DateTime? End { get; set; } = new DateTime();

    [Parameter]
    public Cita? SelectedCita { get; set; }

    [Inject]
    public IUnitOfWork? UnitOfWork { get; set; }

    Cita? _cita = new Cita();

    IEnumerable<Paciente>? PacientesList { get; set; }
    IEnumerable<Sintoma>? SintomasList { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        PacientesList = UnitOfWork?.Pacientes.Get();
        SintomasList = UnitOfWork?.Sintomas.Get();

        if (SelectedCita != null)
        {
            _cita = SelectedCita;
        }
        else
        {
            Console.WriteLine("Start: " + Start + "\nEnd: " + End);
            _cita.Inicio = Start;
            _cita.Fin = End;
            _cita.Sintomas = new List<Sintoma>();
        }
    }

    void OnSubmit()
    {
    // Validacion
        var error = "";
        if (_cita?.Inicio >= _cita?.Fin) error = $"La hora de fin debe ser mayor a la de inicio. \nInicio: {_cita.Inicio}\nFin: {_cita.Fin}";
        else if (_cita?.Inicio?.Hour < 9 || _cita?.Fin?.Hour > 18) error = "Las horas laborales son entre las 9:00AM y las 6:00PM";
        else if (OverlapsWithOtherAppointment()) error = "La cita choca con otra";
        if (!error.IsNullOrEmpty())
        {
            NotificationService.Notify(Notifications.Error(error));
            return;
        }

        if (_cita == null) return;
        UnitOfWork?.Citas.Add(_cita, _cita.Id);
        SaveChanges();
        DialogService.Close(_cita);
    }

    void LoadData(LoadDataArgs args)
    {
        PacientesList = !string.IsNullOrEmpty(args.Filter) ? UnitOfWork?.Pacientes.Get(p => (p.Nombre + p.Apellido).ToLower().Contains(args.Filter.ToLower())) : UnitOfWork?.Pacientes.Get();
        InvokeAsync(StateHasChanged);
    }

    void OnSintomasChange(object value)
    {
        Console.WriteLine($"Sintoma seleccionado: {(value as Sintoma).Dump()}");
        if (!_cita.Sintomas.Contains(value as Sintoma))
            _cita.Sintomas.Add(value as Sintoma);
    }

    void OnSintomaDelete(Sintoma? sintoma)
    {
        Console.WriteLine($"Sintoma eliminado: {sintoma.Dump()}");
        _cita?.Sintomas?.Remove(sintoma);
    }

    bool OverlapsWithOtherAppointment()
    {
    // Las fechas chocan si uno empieza antes de que termine la otra:
    // a.start < b.end && b.start < a.end;
        return UnitOfWork.Citas.Get().Any(c => (c.Id != _cita?.Id) && (_cita?.Inicio < c.Fin && c.Inicio < _cita?.Fin));
    }

    void Delete()
    {
        if (_cita != null && UnitOfWork?.Citas.GetById(_cita.Id) != null)
        {
            UnitOfWork?.Citas.Delete(_cita.Id);
            SaveChanges();
        }
        DialogService.Close(_cita);
    }

    private void SaveChanges()
    {
        NotificationService.Notify(UnitOfWork != null && UnitOfWork.Save() ? Notifications.Success("Operación realizada con éxito!") : Notifications.Error("Ocurrió un error"));
    }


}