@page "/citas"
@page "/citas/{CitaId:int?}"
@inject TooltipService tooltipService

<div class="d-flex align-items-center">
    <h1>Citas</h1>
    <RadzenIcon Icon="help_outline" MouseEnter="@(args => ShowTooltip(args, "Seleccione un espacio vacÃ­o para crear una cita, o una existente para editarla."))" class="ms-3"/>
</div>
<div class="mt-4">
    <div class="row align-items-center mb-3">
        <div class="col-1">
            <RadzenLabel Text="Filtro"/>
        </div>
        <div class="col-2">
            <RadzenSelectBar @bind-Value="Filtro" TValue="CitaFiltro">
                <Items>
                    <RadzenSelectBarItem Text="Nombre" Value="CitaFiltro.NombreCompleto" Style="font-size: 12px;padding:0 12px;"/>
                    <RadzenSelectBarItem Text="ID" Value="CitaFiltro.ID" Style="font-size: 12px;padding:0 12px;"/>
                </Items>
            </RadzenSelectBar>
        </div>
        <div class="col">

            <RadzenDropDown AllowFiltering AllowClear TValue="Cita" @bind-Value="SelectedCita" LoadData="@(args => LoadFilterData(args.Filter))"
                            Data="@CitasList" Placeholder="Busque una cita..." class="w-100 h-25" Change="OnCitaDropdownChange">
                <Template>
                    <div class="py-2">
                        <p style="margin:0;padding: 0;">
                            @((context as Cita)?.Paciente?.NombreCompleto)
                        </p>
                        <hr class="p-0 my-1"/>
                        <div style="font-size: 12px;height: 12px;" class="d-flex justify-content-between">
                            <p>
                                @((context as Cita)?.Motivo)
                            </p>
                            <p class="p-0 m-0">
                                @((context as Cita)?.Inicio.ToString() + " - " + (context as Cita)?.Fin.ToString())
                            </p>
                        </div>
                    </div>
                </Template>
            </RadzenDropDown>
        </div>
    </div>
    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Cita" Data="@(UnitOfWork?.Citas.Get())" StartProperty="Inicio" EndProperty="Fin"
                     TextProperty="Motivo" SelectedIndex="1"
                     SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect TodayText="Hoy">
        <RadzenDayView Text="Dia"/>
        <RadzenWeekView Text="Semana"/>
        <RadzenMonthView Text="Mes"/>
    </RadzenScheduler>
</div>

@code {
    RadzenScheduler<Cita> scheduler;

    [Parameter]
    public int? CitaId { get; set; }

    [Inject]
    public IUnitOfWork? UnitOfWork { get; set; }

    CitaFiltro Filtro { get; set; }
    IEnumerable<Cita>? CitasList { get; set; }

    Cita? SelectedCita { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (CitaId != null)
        {
            LoadCitaById(CitaId);
        }
    }

    void ShowTooltip(ElementReference elementReference, string text, TooltipOptions options = null) => tooltipService.Open(elementReference, text, options);

    async void LoadCitaById(int? id)
    {
        try
        {
            var cita = UnitOfWork?.Citas.GetById(id);
            if (cita != null)
            {
                await DialogService.OpenAsync<CitaDialog>("Editar cita", new Dictionary<string, object> {{"SelectedCita", cita}});
                await scheduler.Reload();
            }
            else
            {
                NotificationService.Notify(Notifications.Error("Cita no encontrada!"));
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
    // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

    // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        Console.WriteLine($"SlotSelect: Start={args.Start} End={args.End}");

        await DialogService.OpenAsync<CitaDialog>("Agregar cita",
            new Dictionary<string, object> {{"Start", args.Start}, {"End", args.End}});

        await scheduler.Reload();
        LoadFilterData();
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Cita> args)
    {
        Console.WriteLine($"AppointmentSelect: Appointment={args.Data.Motivo}");
        try
        {
            await DialogService.OpenAsync<CitaDialog>("Editar cita", new Dictionary<string, object> {{"SelectedCita", args.Data}});
            await scheduler.Reload();
            LoadFilterData();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }


    void LoadFilterData(string filtro = "")
    {
        IEnumerable<Cita>? list = new List<Cita>();
        var includedProperties = "Paciente";

        switch (Filtro)
        {
            case CitaFiltro.ID:
                int parsedFiltro = int.TryParse(filtro, out parsedFiltro) ? parsedFiltro : 0;
                list = UnitOfWork?.Citas.Get(c => c.Id == parsedFiltro);
                break;
            case CitaFiltro.NombreCompleto:
                var filtroText = filtro.ToLower().Trim().Replace(" ", "");

                list = UnitOfWork?.Citas.Get(c => (c.Paciente.Nombre + " " + c.Paciente.Apellido).ToLower().Trim().Replace(" ", "").Contains(filtroText), null, includedProperties);
                break;
            default:
                list = UnitOfWork?.Citas.Get(null, null, includedProperties);
                break;
        }

        if (list != null) CitasList = list.OrderBy(c => c.Inicio);

        InvokeAsync(StateHasChanged);
    }

    void OnCitaDropdownChange()
    {
        if (SelectedCita != null)
            LoadCitaById(SelectedCita.Id);
    }

}