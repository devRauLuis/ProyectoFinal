@page "/citas"
@page "/citas/{CitaId:int?}"

<h1>Citas</h1>


<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Cita" Data="@(UnitOfWork?.Citas.Get())" StartProperty="Inicio" EndProperty="Fin"
                 TextProperty="Motivo" SelectedIndex="1"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView/>
    <RadzenWeekView/>
    <RadzenMonthView/>
</RadzenScheduler>

@* <EventConsole @ref=@console Class="mt-4" /> *@

@code {
    RadzenScheduler<Cita> scheduler;

    [Parameter]
    public int? CitaId { get; set; }

    [Inject]
    public IUnitOfWork? UnitOfWork { get; set; }

    // EventConsole console;
    // Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    //
    // IList<Appointment> appointments = new List<Appointment>
    // {
    //     new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
    //     new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
    //     new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
    //     new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
    //     new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
    //     new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
    //     new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    // };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
    // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

    // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        Console.WriteLine($"SlotSelect: Start={args.Start} End={args.End}");

        await DialogService.OpenAsync<CitaDialog>("Agregar Cita",
            new Dictionary<string, object> {{"Start", args.Start}, {"End", args.End}});

        await scheduler.Reload();
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Cita> args)
    {
        Console.WriteLine($"AppointmentSelect: Appointment={args.Data.Motivo}");
        try
        {
            await DialogService.OpenAsync<CitaDialog>("Edit Appointment", new Dictionary<string, object> {{"SelectedCita", args.Data}});

            await scheduler.Reload();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Cita> args)
    {
    // // Never call StateHasChanged in AppointmentRender - would lead to infinite loop
    //
    // if (args.Data.Text == "Birthday")
    // {
    //     args.Attributes["style"] = "background: red";
    // }
    }

}